> 
> R version 4.0.0 (2020-04-24) -- "Arbor Day"
> Copyright (C) 2020 The R Foundation for Statistical Computing
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>   Natural language support but running in an English locale
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
> > makeVector <- function(x = numeric()) {
> +         m <- NULL
> +         set <- function(y) {
+ +                 x <<- y
+ +                 m <<- NULL
+ +         }
"+                 m <<- NULL
+         }"
> +         get <- function() x
> +         setmean <- function(mean) m <<- mean 
  object 'setmean' not found
> +         getmean <- function() m
> +         list(set = set, get = get,
+ +              setmean = setmean,
"+         list(set = set, get = get,
+              setmean ="
> +              getmean = getmean)
> + }
> > makeCacheMatrix <- function(x = matrix()) {
> +   inv <- NULL
> +   set <- function(y){
+ +     x <<- y
+ +     inv <<- NULL
+ +   }
"+     inv <<- NULL
+   }"
> +   get <- function() x
> +   setInverse <- function(solveMatrix) inv <<- solveMatrix
  object 'setInverse' not found
> +   getInverse <- function() inv
> +   list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
> > ## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
> > cacheSolve <- function(x, ...) {
> +   ## Return a matrix that is the inverse of 'x'
+ +   inv <- x$getInverse()
> +   if(!is.null(inv)){
+ +     message("getting cached data")
+ +     return(inv)
+ +   }
"+     return(inv)
+   }"
> +   data <- x$get()
> +   inv <- solve(data) 
  cannot coerce type 'closure' to vector of type 'any'
> +   x$setInverse(inv)
> +   inv      
> + }
